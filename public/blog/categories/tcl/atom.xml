<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tcl | Vinod Kurup]]></title>
  <link href="http://www.kurup.org/blog/categories/tcl/atom.xml" rel="self"/>
  <link href="http://www.kurup.org/"/>
  <updated>2016-04-07T22:18:39-04:00</updated>
  <id>http://www.kurup.org/</id>
  <author>
    <name><![CDATA[Vinod Kurup]]></name>
    <email><![CDATA[vinod@kurup.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working with collections]]></title>
    <link href="http://www.kurup.org/blog/2006/09/25/working-with-collections"/>
    <updated>2006-09-25T00:00:00-04:00</updated>
    <id>http://www.kurup.org/blog/2006/09/25/working-with-collections</id>
    <content type="html"><![CDATA[<p>Steve Yegge wrote about the <a href="http://steve.yegge.googlepages.com/ruby-tour">expressiveness of
Ruby</a> as compared to
Java. He used this simple problem as an example:</p>

<blockquote><p>How about if we write a program that will print out all the words in the dictionary starting with the letter 'Q' (case-insensitive), grouped by increasing length, and sorted alphabetically within each group.</p></blockquote>

<p>The Ruby version was about 12 lines of code and Java version about
43. Of course, the point of the exercise wasn't simply the difference
in LOCs, but in the overall simplicity of dealing with collections of
data. Still, I wanted to see how Tcl would deal with the same
problem. Here's the simplest version I could come up with:</p>

<p>{% highlight tcl %}
set f [open /usr/share/dict/words r]
set words [read -nonewline $f]
close $f
set qwords [lsearch -all -inline [split $words \n] {[Qq]*}]</p>

<p>proc compare_length {a b} {</p>

<pre><code>if { [string length $a] &lt;= [string length $b] } {
    return -1
} else {
    return 1 
} 
</code></pre>

<p>}</p>

<p>set sorted_qwords [lsort -command compare_length [lsort $qwords]]
set max -1 foreach qword $sorted_qwords {</p>

<pre><code>if { [string length $qword] &gt; $max } {
    set max [string length $qword]
    puts "Words of length $max:"
}
puts "  $qword"
</code></pre>

<p>}
{% endhighlight %}</p>

<p>About 19 lines and pretty simple to write and read. Can this be
improved?</p>

<div id="comment-box">

<h2>Comments from old site</h2>

<div class="one-comment">

<p><b>Meditations on programming languages</b></p>

<p>
I like Paul Graham's essays on this subject.
</p>

<p>Have you seen this http://paulgraham.com/fix.html or this http://paulgraham.com/icad.html?
</p>

<address class="signature">
<span class="author">Prem Thomas</span>
<span class="date">2006-10-03 14:13:23</span>
</address>
</div>

<div class="one-comment">

<p><b>Tcl functional programming (And the example in Perl)</b></p>

<p>
I don't do as much tcl programming as I used to, but I do do a lot of
Perl and some Ruby.
</p>

<p>
One thing I have really picked up from the Perl community is a love of
using functional programming when it makes sense (which is quite a
bit). If you want to get into functional programming in tcl there are
quite a few good resources on the tcl.tk wiki, but there's also a
fantastic functional tcl package in openacs that every openacs
programmer should make themselves familiar with:
</p>

<p>
<a href ="http://openacs.org/api-doc/procs-file-view?version_id=358343&path=packages/acs-tcl/tcl/ad-functional-procs.tcl">[ACS Tcl 5.2.0 : ad-functional-procs.tcl</a> - full lambda functions (with no memory leaks, although a bit of memory usage)
</p>

<p>
Now, onto the fun part! I thought I'd take on the Q word example in
Perl. Here's a reasonable way to do it in Perl:
</p>

<pre>
use strict;
open W, '/usr/share/dict/words' or die $!;
my @words = &lt;W&gt;;
chomp @words;
close W;

my $max = 0;
for my $word (sort {length $a &lt;=> length $b} sort grep { /^q/i } @words) {
    if (length $word > $max) {
        $max = length $word;
        print "Words of length $max:\n"
    }

    print "$word\n";
}
</pre>

<p>
And here's the pathological way :)
</p>

<pre>
open W, '/usr/share/dict/words';
    
length > $max ? print 'Words of length ' . (($max = length) -1) . ":\n$_" : print

for sort {length $a &lt;=&gt; length $b} sort grep { /^q/i } &lt;W&gt;;
</pre>

<address class="signature">
<span class="author">Mark Aufflick</span>
<span class="date">2006-11-26 21:49:24</span>
</address>
</div>

<div class="my-comment">

<p><b>More stuff to learn</b></p>

<p>
Thanks Prem for the amusing comments about languages. I still have the
"Revenge of the Nerds" on my to-read list.
</p>

<p>
Mark, that is one scary looking snippet of Perl. :) Thanks for the
links to the functional programming procs in OpenACS. I had never seen
those. Do you know of any code that uses them?
</p>

<p>
I've been meaning to learn some more about functional programming, but
the going has been difficult. It's definitely a different mindset.
</p>

<address class="signature">
<span class="author">Vinod Kurup</span>
<span class="date">2006-12-14 16:34:02</span>
</address>
</div>

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Testing Rules]]></title>
    <link href="http://www.kurup.org/blog/2006/05/16/automated-testing-rules"/>
    <updated>2006-05-16T00:00:00-04:00</updated>
    <id>http://www.kurup.org/blog/2006/05/16/automated-testing-rules</id>
    <content type="html"><![CDATA[<p>Automated testing is a good thing. For my running log application, I have a proc that creates a new log for a user, called rl::runner::new. If you happen to call it for a user who already has a log, it returns the already created log. When I created the proc way back when, I also created an automated test to make sure that creation worked and that redundant calls returned the orignal log.</p>

<p>Over time, I added some code to make sure that users are given proper permissions on their log. Anytime you make a change, you should run your tests, but of course, I didn't :-) Well, today I did and my test now failed.</p>

<p>Here is the relevant (edited) code:</p>

<p>{% highlight tcl %}
set runner_id [db_nextval acs_object_id_seq]
set ret_val [db_exec_plsql new_runner {}]
permission::grant -party_id $user_id -object_id $runner_id -privilege admin
permission::grant -party_id $user_id -object_id $runner_id -privilege write
{% endhighlight %}</p>

<p>The error was happening in <code>permission::grant</code>. It was complaining that <code>$runner_id</code> wasn't a valid acs_object. What's going on? It looks like it should work. The problem is that I should be granting the permission on <code>ret_val</code>, not on <code>runner_id</code>. (Probably a bad choice of variable names). The first time a log is created, <code>db_exec_plsql</code> returns a value which happens to be the same as <code>runner_id</code>. The second time it's called, it returns a value which is <strong>different</strong> and <code>permission::grant</code> fails.</p>

<p>I would never have caught this error until I tried to call <code>rl::runner::new</code> the second time on the same user. Which would make it one of those very difficult to track bugs. Automated testing saved me a lot of annoying debugging.</p>

<p>That said, I wish OpenACS's testing facilities were better. I worked on a couple other bugs today and I'm trying really hard to write tests to expose bugs before fixing them, but it's really a strain. Especially when you need to do a combination of black box and white box testing. I'd like to make testing easier in OpenACS, but I'm not sure if I have the brainpower :-)</p>

<div id="comment-box">
<h2>Comments from old site</h2>

<div class="one-comment">
<p><b>Improving Testing</b></p>
<p>
Vinod,
</p>
<p>
There is definitely room for improvement. You can specify test
dependency, I think, so you can create a test package environment,
then run several tests using that setup. I haven't tried that yet, but
it should help.
</p>
<p>
Anothing thing to keep in mind is that testing can expose places in
your code that might need to be decoupled. That is one of the
advantages of testing, by thinking of how to run the code is isolation
in the test, you can discover a better design :)
</p>
<address class="signature">
<span class="author">Dave Bauer</span>
<span class="date">2006-05-17 07:27:51</span>
</address>
</div>

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Features coming in Tcl 8.5]]></title>
    <link href="http://www.kurup.org/blog/2006/05/14/new-features-coming-in-tcl-85"/>
    <updated>2006-05-14T00:00:00-04:00</updated>
    <id>http://www.kurup.org/blog/2006/05/14/new-features-coming-in-tcl-85</id>
    <content type="html"><![CDATA[<p>I was looking at the <a href="http://www.tcl.tk/man/tcl8.4/TclCmd/split.htm">Tcl 8.4 man page for 'split'</a> and saw this example code:</p>

<p>{% highlight tcl %}</p>

<h2>Split into fields on colons</h2>

<p>set fields [split $rec ":"]</p>

<h2>Assign fields to variables and print some out...</h2>

<p>lassign $fields userName password uid grp longName homeDir shell
{% endhighlight %}</p>

<p>It shows how to split a string using ':' as the delimiter. The interesting part is the 'lassign' statement. I'd never seen that before. I've always done something annoying like this:</p>

<p>{% highlight tcl %}
set fields [split $rec ":"]
set userName [lindex $fields 0]
set password [lindex $fields 1]
set uid [lindex $fields 2]
set grp [lindex $fields 3]
set longName [lindex $fields 4]
set homeDir [lindex $fields 5]
set shell [lindex $fields 6]
{% endhighlight %}</p>

<p>How could I have overlooked 'lassign' all these years? After berating my idiocy for a few minutes, I tried 'lassign' out and Tcl replied 'invalid command name' . Turns out I'm not as stupid as I thought. :-) 'lassign' is new in Tcl 8.5 (but seems to have snuck in the backdoor of the 8.4 docs). I decided to see what else was <a href="http://www.tcl.tk/software/tcltk/8.5.html">coming in 8.5</a>.</p>

<ul>
<li>Dictionaries. These are associative arrays which reportedly are better than Tcl arrays, but I'm not sure why.</li>
<li>** as an exponentiation operator</li>
<li>Instead of doing: <code>if {[lsearch -exact $list $item] != -1}</code>, the new 'in' operator lets you do <code>if {$item in $list}</code>. There's also a 'ni' operator for 'not in'.</li>
<li>Plenty of other stuff, none of which really caught my eye.</li>
</ul>


<p>Tcl 8.5 is still alpha, so I'm sticking with 8.4 (and my annoying
code) for the moment.</p>

<div id="comment-box">
<h2>Comments from old site</h2>

<div class="one-comment">
<p><b>What about this</b></p>
<p>
Or just do
</p>

<pre><code>
foreach {userName password uid grp longName homeDir shell} [lrange fields 0 6] {break}
# We do an lrange here, otherwise values would be set wrong
# in case someone accidentally supplies a list with too many elements,
# because then the foreach loop would run more than once
</code></pre>
<p>
I just learned the lrange trick yesterday :)
</p>
<p>
I got caught by the over-optimistic 8.4 docs as well. lassign remove
the risk where you need to use the lrange call.
</p>
<address class="signature">
<span class="author">Dave Bauer</span>
<span class="date">2006-05-14 19:56:49</span>
</address>
</div>

<div class="my-comment">
<p><b>Much better</b></p>
<p>
The lrange trick is cleaner than my code. Thanks Dave!
</p>
<address class="signature">
<span class="author">Vinod Kurup</span>
<span class="date">2006-05-15 20:42:37</span>
</address>
</div>

<div class="one-comment">
<p><b>Look also at OpenACS API</b></p>
<p>
The 'util_unlist' API is the exact equivalent of 'lassign'.
</p>
<address class="signature">
<span class="author">Anonymous</span>
<span class="date">2006-07-05 02:30:37</span>
</address>
</div>

<div class="my-comment">
<p><b>Thanks</b></p>
<p>
Thanks - I didn't know about util_unlist. There are so many cool
little-known functions in the OpenACS API
</p>
<address class="signature">
<span class="author">Vinod Kurup</span>
<span class="date">2006-07-05 14:42:46</span>
</address>
</div>

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hit The Wall (a running log)]]></title>
    <link href="http://www.kurup.org/blog/2006/04/21/hit-the-wall-a-running-log"/>
    <updated>2006-04-21T00:00:00-04:00</updated>
    <id>http://www.kurup.org/blog/2006/04/21/hit-the-wall-a-running-log</id>
    <content type="html"><![CDATA[<p>I built a web application to keep track of my running a couple years
ago. I really began using it in earnest during my training for the New
York Marathon last year. I've been meaning to make it available for
others to use for a long time, but it always seemed like there was a
little more work I needed to do on it. While working on it the other
day, I noticed the original timestamp on one of the source files:
<strong>September 21, 2003</strong> Yikes! That's 2 and a half years ago. Enough is
enough &mdash; it's time to let this baby free...</p>

<p><a href="http://kurup.org/run">Hit The Wall</a> is officially version 0.2 and
available for free use by anyone who wants to keep track of their
running. Feel free to look through <a href="http://kurup.org/run/log/log?runner_id=16832">my real log
(read-only)</a> or
<a href="http://kurup.org/run/log/log?runner_id=63350">demorunner's fake log
(read-write)</a> to try it
out.</p>

<div id="comment-box">
<h2>Comments from old site</h2>

<div class="one-comment">
<p><b>Hit The Wall</b></p>
<p>
Cool little tool Vinod, but after reading the reference on the Wall
and how to avoid it I have some alternative names:
</p>

<ul>
<li>Don't Hit The Wall - A Running Log</li>
<li>Avoiding The Wall - A Runner's Log</li>
<li>Going Through Walls - Running Log</li>
<li>Etc.</li>
</ul>

<address class="signature">
<span class="author">Carl Blesius</span>
<span class="date">2006-04-22 21:41:32</span>
</address>
</div>

<div class="my-comment">
<p><b>Thanks Carl</b></p>
<p>
Good point. I just thought 'Hit The Wall' sounded catchy. And it works
in the same vein as FSF's text pager being named 'less' (rather than
'more'). Get it? :-)
</p>
<p>
Most importantly, it's better than the previous name I had in mind,
which was 'Running Log".
</p>
<address class="signature">
<span class="author">Vinod Kurup</span>
<span class="date">2006-04-23 20:46:04</span>
</address>
</div>


</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tcl, a short introduction]]></title>
    <link href="http://www.kurup.org/blog/2006/03/09/tcl-a-short-introduction"/>
    <updated>2006-03-09T00:00:00-05:00</updated>
    <id>http://www.kurup.org/blog/2006/03/09/tcl-a-short-introduction</id>
    <content type="html"><![CDATA[<p>The scripting language used in most of <a href="http://openacs.org">OpenACS</a> is <a href="http://tcl.tk">Tcl</a>. It doesn't receive a lot of press. When people talk about scripting languages, they mean Perl or Python (and now Ruby). Tcl is not considered in the same category, but it should be. I'm not smart enough to explain why, but Salvatore Sanfilippo is and has written a <a href="http://antirez.com/articoli/tclmisunderstood.html">gentle introduction to both the basic and powerful features of Tcl</a>.</p>
]]></content>
  </entry>
  
</feed>
