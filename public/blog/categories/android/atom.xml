<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Vinod Kurup]]></title>
  <link href="https://www.kurup.org/blog/categories/android/atom.xml" rel="self"/>
  <link href="https://www.kurup.org/"/>
  <updated>2018-09-22T21:30:24-04:00</updated>
  <id>https://www.kurup.org/</id>
  <author>
    <name><![CDATA[Vinod Kurup]]></name>
    <email><![CDATA[vinod@kurup.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ClojureScript and PhoneGap]]></title>
    <link href="https://www.kurup.org/blog/2011/11/12/clojurescript-and-phonegap"/>
    <updated>2011-11-12T21:39:34-05:00</updated>
    <id>https://www.kurup.org/blog/2011/11/12/clojurescript-and-phonegap</id>
    <content type="html"><![CDATA[<p><a href="http://phonegap.com">Phonegap</a> is a tool that allows you to develop
apps in HTML5 + javascript and makes it easy to deploy them to
multiple mobile platforms, including Android and iOS.</p>

<p><a href="https://github.com/clojure/clojurescript">ClojureScript</a> is a dialect
of the awesome language, <a href="http://clojure.org">Clojure</a>, that compiles to
Javascript (after a pass through the <a href="http://code.google.com/closure/">Google
Closure</a> optimizer). Because Clojure,
ClojureScript and Google Closure can be confusing terms, I'll use CLJS
instead of ClojureScript for the remainder of this post.</p>

<p>What I wanted to do: Write a simple CLJS app that runs on my Android
phone using these tools.</p>

<h3>Get HelloWorld working with PhoneGap</h3>

<p>Following <a href="http://phonegap.com/start#android">these instructions</a> will
get the Android SDK, Eclipse plugin and PhoneGap working. If you
already have the Android SDK, you'll be able to skip most of it. I'm
most comfortable in Emacs, so I'll be using that instead of
Eclipse. Here is the command-line command for creating your project
(the <code>-t</code> refers to your android target which you can find by doing
<code>android list avds</code>):</p>

<pre><code>$ android create project -n HelloPhoneGap -t 2 -p HelloPhoneGap -k com.phonegap.helloworld -a App
</code></pre>

<p>By the end of these instructions, you should have a copy of an app
called HelloPhoneGap on your phone which, when clicked, shows a
'Hello World' screen.</p>

<h3>Setup CLJS</h3>

<p>Follow the <a href="https://github.com/clojure/clojurescript/wiki/Quick-Start">simple
instructions</a>,
recreated here because they're just so simple.</p>

<pre><code>$ git clone git://github.com/clojure/clojurescript.git
$ cd clojurescript
$ ./script/bootstrap
</code></pre>

<p>That's it. The CLJS compiler and REPL are ready to work.</p>

<h3>Get HelloWorld working via HTML</h3>

<p>Follow the
<a href="https://github.com/clojure/clojurescript/wiki/Quick-Start">instructions</a>
under the heading <em>Using ClojureScript on a Web Page</em> to build a
Javascript file and associated HTML file for testing.</p>

<h3>Put CLJS and PhoneGap together</h3>

<p>OK, let's make something a little interactive on the phone. I'm going
to build a BMI calculator that takes a person's height and weight in
Imperial (i.e. American) units and calculates a Body Mass Index. BMI
is simply weight divided by the square of height, with units of
kg/m<super>2</super>.</p>

<p>Here's the CLJS file:</p>

<p>``` clojure</p>

<pre><code>(ns bmi)

(defn height [feet inches]
  (-&gt; feet (* 12) (+ inches) (* 2.54) (/ 100)))

(defn weight [lbs]
  (/ lbs 2.2))

(defn bmi [h w]
  (js/Math.round (/ w (* h h))))

(defn ^:export alertDismissed []
  nil)

(defn ^:export displaybmi [form]
  (let [h (height (js/parseInt form.f.value) (js/parseInt form.i.value))
        w (weight (js/parseInt form.l.value))]
    (js/navigator.notification.alert (bmi h w) hello.alertDismissed)))
</code></pre>

<p>```</p>

<p>Basically, we create simple functions to convert Imperial heights and
weights to metric values, calculate a BMI and then use <code>displaybmi</code> to
parse form parameters, calculate the BMI and show that result in an
Android notification popup. <code>alertDismissed</code> is a callback that gets
called when the user dismisses the notification. (I'm just discarding
the information here). Those are the only 2 functions that are needed
by the HTML file, so those are the only 2 that need the <code>:export</code>
metadata tag. <code>navigator.notification.alert</code> is a PhoneGap API call
that does the actual notification.</p>

<p>The calls prefixed by <code>js/</code> are understood by the CLJS compiler to
refer to the global JavaScript namespace. If you didn't include that
prefix, the compiler would assume you meant a call in the local
<code>bmi</code> namespace, which would obviously fail.</p>

<p>Here's the HTML file (in <code>HelloPhoneGap/assets/www/</code>):</p>

<p>{% codeblock lang:html %}
&lt;!DOCTYPE HTML>
<html>
  <head></p>

<pre><code>&lt;title&gt;BMI calculator&lt;/title&gt;
&lt;script type="text/javascript" charset="utf-8" src="phonegap-1.0.0.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" charset="utf-8" src="bmi.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;h1&gt;BMI calculator&lt;/h1&gt;

&lt;form&gt;
  Height: &lt;input name="f" size="2"&gt; ft. &lt;input name="i" size="2"&gt; in. &lt;br&gt;
  Weight: &lt;input name="l" size="2"&gt; lbs.&lt;br&gt;
  &lt;input type="button" value="Calculate BMI" onclick="bmi.displaybmi(this.form)"&gt;
&lt;/form&gt;
</code></pre>

<p>   </body>
</html>
{% endcodeblock %}</p>

<p>Now compile the CLJS and move the compiled JS file to
<code>HelloPhoneGap/assets/www/</code></p>

<pre><code>$ ./bin/cljsc bmi.cljs '{:optimizations :simple :pretty-print true}' &gt; bmi.js
$ cp bmi.js ~/dev/HelloPhoneGap/assets/www/
</code></pre>

<p>The <code>:simple</code> value for optimizations and the <code>true</code> value for
pretty-print make it so that we can read the resulting JS file, but
can be changed to <code>:advanced</code> and <code>false</code> respectively when ready for
production.</p>

<p>Now, go back into the HelloPhoneGap Android project and compile it and
send it to the emulator (<code>C-c C-c i</code> in emacs). You should now have a
simple BMI calculator working on Android.</p>

<p>{% img /images/bmi.png BMI Android Screenshot %}</p>

<h3>Next steps</h3>

<p>The promise of PhoneGap is that you could use similar HTML/Javascript
to create iOS versions as well, but I haven't done that yet. There are
tons of API calls available on both platforms which are supposed to
give you the same access that native apps have. Using ClojureScript
means you get to use a modern functional language to create your app,
while getting access to the features that only JavaScript APIs
provide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doggcatcher]]></title>
    <link href="https://www.kurup.org/blog/2011/05/23/doggcatcher"/>
    <updated>2011-05-23T21:51:46-04:00</updated>
    <id>https://www.kurup.org/blog/2011/05/23/doggcatcher</id>
    <content type="html"><![CDATA[<p>I talked yesterday about how I didn't like the Google Listen podcast
client. I did a little Googling and found a nice solution (somewhat
ironic, in an Alanis Morrissette kinda way):
<a href="http://www.doggcatcher.com/">Doggcatcher</a>. It costs $6.99 and I spent
an extra $3.99 for <a href="https://market.android.com/details?id=com.aocate.presto">Presto Sound
Library</a>
which allows you to speed up the podcasts a little. Sorry Merlin! (He
hates when people do this). Doggcatcher seems to do everything I
mentioned as requirements in yesterday's post. I also like that it
doesn't sync between clients, so I can have audio podcasts on my phone
and video podcasts on my gtab tablet. It has a million configuration
options, so you can set certain podcasts as higher priority than
others and you can define how many episodes should be downloaded per
podcast. I love having that kind of flexibility. Most importantly, the
UI has been understandable and every time I launch it, I'm placed
right back at the same place that I left off when I quit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Listen doesn't rock]]></title>
    <link href="https://www.kurup.org/blog/2011/05/22/google-listen-doesnt-rock"/>
    <updated>2011-05-22T20:51:03-04:00</updated>
    <id>https://www.kurup.org/blog/2011/05/22/google-listen-doesnt-rock</id>
    <content type="html"><![CDATA[<p>In the years I've been listening to podcasts, I've only found 2
podcast clients that I've really liked: iTunes (back around 2005-2007)
and a bash script that I wrote which simply copied files downloaded by
<a href="http://podget.sourceforge.net/">podget</a> onto my iPod nano. <a href="http://listen.googlelabs.com/">Google
Listen</a> on my Droid X (Android 2.2) is
tolerable, but only barely. I think my requirements are simple. I want
to put in URLs and have the client get all the podcasts in that URL
and stick them in a queue. I want the client to refresh every N hours
and add new files to the queue. I want the client to automatically
download each file in the queue. Once I listen to a file, I want the
client to delete it from my device. I'd like a configurable option to
be able to save a file, while I'm listening to it, so if I am
listening to something that I want to hear again, I hit a save button
and it won't automatically be deleted. If I don't like an episode, I'd
like to hit 'next' to have that podcast deleted and the next one
started. Finally, I want some statistics about which podcasts I'm
listening to, which ones I'm skipping, and then some suggestions about
which podcasts I might like. A product from Google should be able to
do this. Unfortunately, I can't reliably tell which podcasts I'm
subscribed to. There is a 'subscribe' button in each one, and when I
click it, it changes to 'unsubscribe', but then when I back out and
come back, it says 'subscribe' again, so I'm not sure if I am
subscribed or unsubscribed. When I subscribe, the podcasts show up in
Google Reader, and I don't want them there. I understand the idea of
reusing Google Reader since it is a RSS/Atom reader, but I never
listen to podcasts on my computer. I don't know what happens if I mark
something as read in Google Reader. Does that mean it won't show up in
Listen? I haven't figured it out. Each time I start Listen, it seems
that a different podcast starts, rather than starting where I left
off. Well, it's inconsistent. Sometimes it works, sometimes it
doesn't. Skipping a podcast doesn't delete it, although there is a
config option for that. Maybe I'm just doing it wrong. Most
annoyingly, it doesn't automatically download all the podcasts, so
when one finishes, I have to wait for the next one to start buffering
and if I'm driving and I happen to be in a poor 3G service area, that
might take a while. Maybe this should be my first Android project?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android ResourcesNotFoundException]]></title>
    <link href="https://www.kurup.org/blog/2011/05/16/android-resourcesnotfoundexception"/>
    <updated>2011-05-16T20:44:12-04:00</updated>
    <id>https://www.kurup.org/blog/2011/05/16/android-resourcesnotfoundexception</id>
    <content type="html"><![CDATA[<p>If you see this error:</p>

<pre><code>E/AndroidRuntime(  457): android.content.res.Resources$NotFoundException:
File Yamba1 from xml type layout resource ID #0x7f060000
</code></pre>

<p>... try deleting the <code>bin/</code> and <code>gen/</code> directories in your app. It should
clear the error.</p>

<p>Reference: <a href="http://code.google.com/p/android/issues/detail?id=2726#c6">http://code.google.com/p/android/issues/detail?id=2726#c6</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Android Review]]></title>
    <link href="https://www.kurup.org/blog/2011/05/08/learning-android-review"/>
    <updated>2011-05-08T22:10:19-04:00</updated>
    <id>https://www.kurup.org/blog/2011/05/08/learning-android-review</id>
    <content type="html"><![CDATA[<p><a href="http://amzn.to/m8SK61"><img class="inset right" src="https://www.kurup.org/images/learning-android.jpg" /></a></p>

<p>I recently finished reading <a href="http://amzn.to/m8SK61">Learning
Android</a>. I have a Droid X, Mala has a Droid
Eris, and I just bought a Viewsonic g-tablet, so I have plenty of
Android devices. While I still have trouble with the idea of typing on
a touchscreen, I know that we are moving towards a future where mobile
devices are our primary computers. This is not earth
shattering. <a href="http://philip.greenspun.com/business/mobile-phone-as-home-computer">Philip Greenspun mentioned it 5 years
ago</a>. Android
will be <a href="http://www.tbray.org/ongoing/When/201x/2011/04/25/Mobility">one of the more prominent mobile
OS's</a>
along with iOS, so I want to learn how to program it.</p>

<p>I came into this book having browsed some of the example code on the
<a href="http://developer.android.com/">developer.android.com</a> website. It is
great for an overview, and there is a lot of in-depth information on
APIs, etc., but I still didn't quite understand how to go about
starting an app.</p>

<p>In March, O'Reilly had a sale on e-books, so I bought <a href="http://amzn.to/m8SK61">Learning
Android</a>. It is a reasonable introduction to
Android programming. It's beings gently, explaining the history of
Android and providing a general overview of how the Android stack
works. It's explains how to use the Eclipse IDE, but as a fervent
emacs fan, I was easily able to adjust to using emacs (with
<a href="https://github.com/remvee/android-mode">android-mode.el</a>) for all of
my development. There were typos and minor errors, but fortunately
<a href="http://oreilly.com/catalog/errataunconfirmed.csp?isbn=0636920010883">O'Reilly has an errata
page</a>
where people can post fixes and suggestions. Keep that page open while
you're reading this book. There were a couple areas where the ordering
of the discussion could have been improved. If I didn't have that
errata page at hand, I would have been completely
frustrated. Especially at the beginning, the instructions were not
detailed enough. For example, we are instructed on how to create a
program and how to start the emulator, but there is no clear
explanation on how to run the program on the emulator. A little more
step-by-step hand-holding would have been nice.</p>

<p>In case you ignored my advice to check out that errata page, at least
make sure that you have the updated version of the <a href="http://examples.oreilly.com/0636920010883/README-JTwitter-Library.txt">jTwitter
library</a>,
or else you'll never get the sample programs to run without errors.</p>

<p>I haven't used Java in a while, so I forgot how verbose Java
is. Writing Tcl, Ruby and Python has spoiled me. It takes so long to
do something simple in Java. I know that this is usually offset by
code generators and IDEs, but it still just seems so clunky to read
and write. There is a <a href="http://code.google.com/p/android-scripting/">scripting language project for Android
(SL4A)</a>. I haven't tried
it, but it involves bundling the scripting environment with your app
if you want to distribute it to others. I'm also not certain that it
provides access to all of the functionality provided in the Java SDK.
Someday, I hope that a scripting language SDK is provided. It seems
like a natural progression.</p>

<p>All in all, I think Learning Android is perfect for someone who wants
to get started in Android programming. It gives a nice gentle
introduction to all of the basics of how the platform works. Most of
this information is available on the web in various places, but it's
nice to have it all in one place, and I still think there's value to
having one book that takes you from step zero to a working app. I
think I'll now be able to use the online docs to get me moving. I was
often frustrated by the typos, minor technical errors and
inconsistencies, but I suspect the book was under a lot of time
pressure, given how hot mobile programming is these days. It just felt
like it was written on a rushed deadline. It's also not the most
entertaining book in the world, which is OK for a technical book. I'd
always rather have a boring technical book, than an <em>attempt</em> at an
entertaining one.</p>
]]></content>
  </entry>
  
</feed>
