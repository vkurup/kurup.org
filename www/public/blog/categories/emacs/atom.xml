<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Vinod Kurup]]></title>
  <link href="https://www.kurup.org/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="https://www.kurup.org/"/>
  <updated>2019-04-09T08:22:17-04:00</updated>
  <id>https://www.kurup.org/</id>
  <author>
    <name><![CDATA[Vinod Kurup]]></name>
    <email><![CDATA[vinod@kurup.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Emacs Posts]]></title>
    <link href="https://www.kurup.org/blog/2014/07/23/some-emacs-posts"/>
    <updated>2014-07-23T21:38:00-04:00</updated>
    <id>https://www.kurup.org/blog/2014/07/23/some-emacs-posts</id>
    <content type="html"><![CDATA[<p>A few cool Emacs posts have flown across my radar, so I'm noting them here for that time in the
future when I have time to play with them.</p>

<ul>
<li><a href="http://endlessparentheses.com/manually-choose-a-fallback-font-for-unicode.html">Get unicode glyphs to show properly</a>. (╯°□°）╯︵ ┻━┻</li>
<li><a href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html/">Creating slides with org-mode and Reveal.js</a>.
Finally, a sane way to create a presentation :)</li>
<li><a href="https://github.com/syohex/emacs-anzu">Anzu</a>: Improves incremental search. Anzu shows the number
of matches found, and how many matches remain in the document.
<img src="https://github.com/syohex/emacs-anzu/raw/master/image/anzu.gif"></li>
<li><a href="http://from-the-cloud.com/en/emacs/2013/01/28_emacs-as-a-django-ide-with-python-djangoel.html">Emacs as a Django IDE</a>:
I tried this out briefly, but didn't end up sticking with it. It seemed too heavyweight.
I'm probably just too used to my own workflow. I still think it's an interesting idea and would
like to try it again sometime.</li>
<li><a href="http://emacsredux.com/blog/2014/07/22/travel-back-and-forward-in-git-history/">Travel back and forth in git history</a>:
I'm addicted to <a href="http://www.emacswiki.org/emacs/Magit">magit mode</a>, to the point that the
only git command I use manually nowadays is <code>git clone</code>. I do everything else in magit. Magit has
a <code>magit-blame-mode</code> which shows when each line in a file was changed and by whom.
<code>git-timemachine</code> seems to take that a step further by visiting each revision, one by
one. I can think of a few times where that would have been useful.</li>
<li><a href="https://github.com/omouse/emacs-sos">Search StackOverflow from inside Emacs</a>: Enough said.</li>
<li><a href="https://github.com/skeeto/elfeed">Emacs RSS client</a>: Still using NewsBlur, but totally miss
Google Reader. Maybe I need to try this one out.</li>
<li><a href="http://sachachua.com/blog/series/read-lisp-tweak-emacs/">Sacha Chua's minicourse on Elisp</a>: Have
to read through this someday!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs for Python Programming]]></title>
    <link href="https://www.kurup.org/blog/2012/10/24/emacs-for-python-programming"/>
    <updated>2012-10-24T16:45:49-04:00</updated>
    <id>https://www.kurup.org/blog/2012/10/24/emacs-for-python-programming</id>
    <content type="html"><![CDATA[<p>(Note: See the bottom of this post for updates)</p>

<p>I was honored to to give my
<a href="https://speakerdeck.com/vkurup/emacs-for-python-programming">"Emacs for Python Programming"</a>
talk at the inaugural <a href="http://pycarolinas.org">PyCarolinas</a>
conference. The conference was a huge success in every way, thanks to
the efforts of <a href="http://www.ironfroggy.com/">Calvin Spealman</a>, et. al.
I promised that I would post my Emacs setup, so here it is.</p>

<h2>Step 0: Prerequisites</h2>

<p>This may work with other setups, but here's what I tested:</p>

<ul>
<li>Linux</li>
<li>Emacs version 24</li>
<li>python 2.7 or 3.3</li>
<li><a href="http://pypi.python.org/pypi/pip">pip</a></li>
<li><a href="http://www.virtualenv.org/">virtualenv</a></li>
<li><a href="http://virtualenvwrapper.readthedocs.org/">virtualenvwrapper</a></li>
<li>git</li>
</ul>


<h2>Step 1: Clear out any previous customization</h2>

<p>As evidenced by the numerous blog posts documenting how to set this
up, it's not straightforward. I recommend starting from scratch to
make sure everything is set up properly. Once you have it working,
then you can customize it. Make sure to start these commands in your
home directory.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vinod:~<span class="nv">$ </span>mkdir old-emacs
</span><span class='line'>vinod:~<span class="nv">$ </span>mv .emacs .emacs.d old-emacs/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Step 2: Set up initial Emacs configuration</h2>

<p>Create an empty <code>.emacs.d</code> directory and a subdirectory named with your
username. My username is <code>vinod</code>, so we'll create a directory
structure called <code>.emacs.d/vinod/</code>. The emacs-starter-kit tells emacs
to automatically load any elisp files from that special directory, so
you'll always have a place to drop custom elisp files.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vinod:~<span class="nv">$ </span>mkdir -p ~/.emacs.d/<span class="nv">$USER</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Create a file named <code>.emacs.d/init.el</code> with the following contents:</p>

<p>```scm my-init.el https://gist.github.com/3948955
(require 'package)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(package-initialize)</p>

<p>(when (not package-archive-contents)
  (package-refresh-contents))</p>

<p>(defvar my-packages '(starter-kit</p>

<pre><code>                  starter-kit-bindings
                  starter-kit-js
                  autopair
                  yasnippet
                  auto-complete
                  fuzzy)
</code></pre>

<p>  "A list of packages to ensure are installed at launch.")</p>

<p>(dolist (p my-packages)
  (when (not (package-installed-p p))</p>

<pre><code>(package-install p)))
</code></pre>

<p>;; autopair and yas in all modes
(autopair-global-mode)
(yas-global-mode 1)</p>

<p>;; autocomplete
(require 'auto-complete-config)
(setq ac-dictionary-files (list (concat user-emacs-directory ".dict")))
(ac-config-default)
;; hack to fix ac-sources after pycomplete.el breaks it
(add-hook 'python-mode-hook</p>

<pre><code>      '(lambda ()
         (setq ac-sources '(ac-source-pycomplete
                            ac-source-abbrev
                            ac-source-dictionary
                            ac-source-words-in-same-mode-buffers))))
</code></pre>

<p>;; Set up python-mode
(setq py-install-directory (concat esk-user-dir "/python-mode.el-6.0.12/"))
(add-to-list 'load-path py-install-directory)
;; this will show method signatures while typing
(setq py-set-complete-keymap-p t)
(require 'python-mode)
;; activate the virtualenv where Pymacs is located
(virtualenv-workon "default/")</p>

<p>(defun load-pycomplete ()
  "Load and initialize pycomplete."
  (interactive)
  (let* ((pyshell (py-choose-shell))</p>

<pre><code>     (path (getenv "PYTHONPATH")))
(setenv "PYTHONPATH" (concat
                      (expand-file-name py-install-directory) "completion"
                      (if path (concat path-separator path))))
(if (py-install-directory-check)
    (progn
      (setenv "PYMACS_PYTHON" (if (string-match "IP" pyshell)
                                  "python"
                                pyshell))
      (autoload 'pymacs-apply "pymacs")
      (autoload 'pymacs-call "pymacs")
      (autoload 'pymacs-eval "pymacs")
      (autoload 'pymacs-exec "pymacs")
      (autoload 'pymacs-load "pymacs")
      (load (concat py-install-directory "completion/pycomplete.el") nil t)
      (add-hook 'python-mode-hook 'py-complete-initialize))
  (error "`py-install-directory' not set, see INSTALL"))))
</code></pre>

<p>(eval-after-load 'pymacs '(load-pycomplete))</p>

<p>;; pyflakes flymake integration
;; http://stackoverflow.com/a/1257306/347942
(when (load "flymake" t)
  (defun flymake-pyflakes-init ()</p>

<pre><code>(let* ((temp-file (flymake-init-create-temp-buffer-copy
                   'flymake-create-temp-inplace))
       (local-file (file-relative-name
                    temp-file
                    (file-name-directory buffer-file-name))))
  (list "pycheckers" (list local-file))))
</code></pre>

<p>  (add-to-list 'flymake-allowed-file-name-masks</p>

<pre><code>           '("\\.py\\'" flymake-pyflakes-init)))
</code></pre>

<p>(add-hook 'python-mode-hook 'flymake-mode)</p>

<p>;; menu bar is useful when getting started
(menu-bar-mode)
(setq-default default-tab-width 4)
```</p>

<h2>Step 3: Create a python virtualenv</h2>

<p>We'll keep all the python-side customization in a virtualenv named
<code>default</code>. It's important that the name you choose is the same as the
name in the <code>(virtualenv-workon)</code> command in line 45 of Step 2.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vinod:~<span class="nv">$ </span>mkvirtualenv -p python2 default
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After it does its thing, your shell prompt should change, indicating
that your new virtualenv is activated</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>default<span class="o">)</span>vinod:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Step 4: Install Pymacs</h2>

<p><a href="http://pymacs.progiciels-bpi.ca/index.html">Pymacs</a> is a really cool
piece of software that sets up a 2 way communication between Emacs and
Python, allowing you to control Emacs with python commands rather than
elisp commands. It requires a python piece (<code>Pymacs.py</code>) and an Emacs
piece (<code>pymacs.el</code>). Unfortunately, they're not installable via <code>pip</code>
or <code>package.el</code>, but installation is easy enough.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>default<span class="o">)</span>vinod:~<span class="nv">$ </span>mkdir src
</span><span class='line'><span class="o">(</span>default<span class="o">)</span>vinod:~/src<span class="nv">$ </span><span class="nb">cd </span>src
</span><span class='line'><span class="o">(</span>default<span class="o">)</span>vinod:~/src<span class="nv">$ </span>git clone git://github.com/pinard/Pymacs.git
</span><span class='line'><span class="o">(</span>default<span class="o">)</span>vinod:~/src<span class="nv">$ </span><span class="nb">cd </span>Pymacs&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;check to make sure tests pass&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">(</span>default<span class="o">)</span>vinod:~/src/Pymacs<span class="nv">$ </span>make check&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;install it <span class="o">(</span>Be sure you<span class="err">&#39;</span>re inside your virtualenv!<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">(</span>default<span class="o">)</span>vinod:~/src/Pymacs<span class="nv">$ </span>make install&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;install the emacs extension&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">(</span>default<span class="o">)</span>vinod:~/src/Pymacs<span class="nv">$ </span>cp pymacs.el ~/.emacs.d/<span class="nv">$USER</span>/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Step 5: Install other python packages</h2>

<p>These helper packages are easier to install:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>default<span class="o">)</span>vinod:~<span class="nv">$ </span>pip install pyflakes pep8
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The pyflakes and pep8 packages check your code as you type using
Emacs' flymake mode. Now, deactivate your virtualenv.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>default<span class="o">)</span>vinod:~<span class="nv">$ </span>deactivate
</span><span class='line'>vinod:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Step 6: Install pycheckers</h2>

<p>Flymake is the part of Emacs that checks your code for errors on the
fly. It calls a shell script called <code>pycheckers</code>, so you need to have
a script by that name in your shell's <code>PATH</code>. Here's mine
(<code>~/bin/pycheckers</code>):</p>

<p>```sh pycheckers.sh https://gist.github.com/3948973</p>

<h1>!/bin/bash</h1>

<p>pyflakes "$1"
pep8 --repeat "$1"
true
```</p>

<h2>Step 7: Install python-mode.el</h2>

<p>As I mentioned in my talk, there are multiple Python modes available,
but I recommend using the one named python-mode.el, which is developed
at
<a href="http://launchpad.net/python-mode">http://launchpad.net/python-mode</a>.
It does periodically get uploaded to
<a href="http://marmalade-repo.org/packages/python-mode">Marmalade</a>, but the
auto-completion using pycomplete doesn't work well on the version that
is there now (6.0.10), so I recommend that you manually download and
install the latest stable version (6.0.12). I'll update this post once
a stable working version gets uploaded to
<a href="http://marmalade-repo.org/">Marmalade</a> or
<a href="http://melpa.milkbox.net/">Melpa</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vinod:~<span class="nv">$ </span><span class="nb">cd</span> ~/.emacs.d/<span class="nv">$USER</span>
</span><span class='line'>vinod:~/.emacs.d/vinod<span class="nv">$ </span>curl -L https://launchpad.net/python-mode/trunk/6.0.12/+download/python-mode.el-6.0.12.tar.gz | tar xz
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Step 8: Test it all out</h2>

<p>Launch emacs and open a python file named <code>test.py</code>. Type the following:</p>

<pre><code>import os
os.path.jo
</code></pre>

<p>Wait at this point. You should see auto-completion of <code>os.path.join</code>
followed shortly by a yellow popup showing documentation of that method.
Hitting return should accept the completion. Then type <code>(</code> and you
should see the method signature in the minibuffer.</p>

<p>Move the cursor over any letter in <code>join</code>. Hit 'F1'. A window should
popup with the docstring for <code>os.path.join</code>. Hit 'F2'. A new window
should be opened with the code for <code>os.path.join</code>. Hit 'F3'. You'll be
prompted to enter the name of any python command, and Emacs will show
you the docstring.</p>

<p>Type the string 'blah' and hit return. The string should be
highlighted in pink and if you mouseover it, the minibuffer will say
<code>undefined name 'blah'</code>. That's flymake working for you.</p>

<p>Hit <code>C-c C-c</code> and the buffer should be sent to a Python interpreter and
you'll be dropped in the REPL after the code has been loaded. Any
errors in the code will be reported.</p>

<p>If all of this works, then CONGRATULATIONS!!! If not, let me know and
I'll see if I can help debug.</p>

<h2>Step 9: Customize</h2>

<p>All of this is customizable in hundreds of ways. Try <code>M-x
customize-group RET python-mode RET</code> to see how.</p>

<h2>Step 10: How to create a new python project</h2>

<p>Whenever you want to create a new Python project, you have do the
following:</p>

<h3>Create a new virtualenv</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vinod:~<span class="nv">$ </span>mkvirtualenv newproject
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Install pymacs into that virtualenv</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>newproject<span class="o">)</span>vinod:~<span class="nv">$ </span><span class="nb">cd</span> ~/src/Pymacs
</span><span class='line'><span class="o">(</span>newproject<span class="o">)</span>vinod:~/src/Pymacs<span class="nv">$ </span>make install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Install the other pip modules</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>newproject<span class="o">)</span>vinod:~/src/Pymacs<span class="nv">$ </span>pip install pyflakes pep8
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Switch to that virtualenv in emacs</h3>

<pre><code>M-x virtualenv-workon RET newproject/ RET
</code></pre>

<h2>Issues</h2>

<h3>Changing virtualenvs doesn't restart Pymacs</h3>

<p>For the most part, this won't affect much, but if you move from a
Python2 project to a Python3 project, you may have problems. The
workaround is to call <code>M-x pymacs-terminate-services</code>, then <code>M-x
virtualenv-workon</code> to change your virtualenv, and then finally
<code>M-x load-pycomplete</code> to restart pymacs and pycomplete.</p>

<h3>Latest stable version of python-mode.el isn't on Melpa</h3>

<p>I'd much prefer to just load python-mode using the built-in Emacs
package manager.</p>

<h3>Pymacs installation is harder than it needs to be</h3>

<p>I wish Pymacs could be installed by a 2 step process</p>

<ol>
<li>pip install Pymacs</li>
<li>M-x package-install RET pymacs RET</li>
</ol>


<h3>Which pycheckers to use?</h3>

<p>My script uses pep8 and pyflakes. There are a lot of other options out
there and I do not know which is best. See
<a href="http://stackoverflow.com/questions/1428872/pylint-pychecker-or-pyflakes">this post</a>
for more details.</p>

<h3>Not using ropemacs any more</h3>

<p>In my talk, I used ropemacs. In this setup, I have decided against it.
I was mostly using it for code-completion and documentation lookup,
but I like pycomplete.el better for those purposes. It's included in
python-mode and it shows method signatures as you type. Ropemacs does
have other features such as project management (easily jumping to
files in the same project), and refactoring (changing variable names
throughout project). I haven't used those, so I decided not to install
ropemacs.</p>

<h3>Project management not included</h3>

<p>I haven't yet decided which package to use for this. I'll probably try
projectile, but there are many other options, some lightweight
(ropemacs, eproject, pony-mode) and some heavyweight (ecb, CEDET).</p>

<h2>References</h2>

<p>I gleaned knowledge from all of the following, in no particular order.</p>

<ul>
<li><a href="http://slacy.com/blog/2011/03/pymacs-ropemacs-and-virtualenv-all-at-the-same-time/">Using Pymacs and virtualenv together (slacy.com)</a></li>
<li><a href="http://www.yilmazhuseyin.com/blog/dev/emacs-setup-python-development/">Using Ropemacs for autocompletion (yilmazhuseyin.com)</a></li>
<li><a href="http://stackoverflow.com/questions/2855378/ropemacs-usage-tutorial/2858148#2858148">How to use Rope to automatically change virtualenv for you</a></li>
<li><a href="http://almostobsolete.net/rope-and-virtualenv.html">Ropemacs and virtualenv (almostobsolete.net)</a></li>
<li><a href="http://www.rwdev.eu/articles/emacspyeng">The post that turned me on to pycomplete.el (rwdev.eu)</a></li>
<li><a href="http://hide1713.wordpress.com/2009/01/30/setup-perfect-python-environment-in-emacs/">Perfect Python Environment (2009)</a></li>
<li><a href="http://www.masteringemacs.org/articles/2010/10/04/beginners-guide-to-emacs/">Lot's of great 'advanced-beginner' emacs tips</a></li>
<li><a href="http://blog.cou929.nu/setting-up-python-environment-on-emacs">Using python.el rather than python-mode.el</a></li>
<li><a href="http://pedrokroger.net/2010/07/configuring-emacs-as-a-python-ide-2/">Using IPython, pylookup and more (pedrokroger.net)</a> - I need to look into this post some more.</li>
<li><a href="http://emacswiki.org/emacs/PythonProgrammingInEmacs">EmacsWiki Python Page</a></li>
<li><a href="http://www.saltycrane.com/blog/2010/05/my-emacs-python-environment/">Python.el, ropemacs, and a little django tip at the end</a></li>
<li><a href="https://github.com/aculich/virtualenv.el">Virtualenv.el (something similar is included in python-mode.el</a></li>
<li><a href="https://github.com/pdee/pdee">Python Development Environment</a> -
Looks promising, just wish there was some documentation on how to
use it.</li>
<li><a href="http://borkware.com/rants/emacs-dev/">Emacs for Cocoa Development</a> - OK, not at all related to python, but some great insight from an Emacs (and all-around) wizard. Don't miss the ranting at the end of the page.</li>
<li><a href="http://jesselegg.com/archives/2010/02/25/emacs-python-programmers-part-1/">Python.el basics</a></li>
<li><a href="http://sunnyeves.blogspot.com/2011/04/debugging-python-on-emacs-ide.html">Using PDB in Emacs</a></li>
<li><a href="https://github.com/EnigmaCurry/emacs">Ryan McGuire's .emacs.d</a></li>
<li><a href="http://www.enigmacurry.com/2009/01/21/autocompleteel-python-code-completion-in-emacs/">AutoComplete for Python (enigmacurry.com)</a></li>
<li><a href="http://www.enigmacurry.com/2008/05/09/emacs-as-a-powerful-python-ide/">The original Python IDE post (enigmacurry.com)</a></li>
</ul>


<h2>Updates</h2>

<h4>2012-10-27</h4>

<p>Thanks to <a href="https://twitter.com/danpoirier">@danpoirier</a> and
<a href="http://twitter.com/gregnewman">@gregnewman</a> for testing. I initially
recommended using the master branch of python-mode.el, but now I
recommend using the latest stable release (as of now) which is version
6.0.12 to avoid problems loading Pymacs. There's a bug on 6.0.12 with
<code>virtualenv-workon</code> that requires you to put a trailing slash after
the name of your virtualenv, so I've updated the <code>init.el</code> file above
to account for those changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Autocomplete stumbles on yasnippet]]></title>
    <link href="https://www.kurup.org/blog/2012/10/15/emacs-autocomplete-stumbles-on-yasnippet"/>
    <updated>2012-10-15T13:02:18-04:00</updated>
    <id>https://www.kurup.org/blog/2012/10/15/emacs-autocomplete-stumbles-on-yasnippet</id>
    <content type="html"><![CDATA[<p><a href="http://cx4a.org/software/auto-complete/">Autocomplete Mode</a> is an
Emacs mode that tries to guess what word you're typing and provide
auto-completion. Recently, it started failing in simple scenarios.</p>

<p>It can use various 'sources' to try to figure out what you're about to
type. The simplest source is <code>ac-source-dictionary</code> which is a simple
list of words. If you start typing any of those words, it will try to
autocomplete them for you. Normally, you'd put those words in a file,
with each word on a separate line, but for testing purposes, you can
also add them manually using an elisp function. Here's the test that
failed for me:</p>

<pre><code>(add-to-list 'ac-user-dictionary "foobar@example.com")
</code></pre>

<p>That adds the email address to the dictionary. Then, typing 'foo' in
any buffer, should offer to autocomplete the entire email address.
Unfortunately, it wasn't working.</p>

<p>To debug, I typed 'foo' and then did <code>M-x auto-complete</code>, which forces
auto-complete to look for a completion. This resulted in an error in
the Minibuffer:</p>

<pre><code>ac-yasnippet-candidates: Symbol's function definition is void: yas/current-snippet-table
</code></pre>

<p>This led me to check which 'sources' autocomplete was trying to use:
<code>C-h v ac-sources</code></p>

<pre><code>(ac-source-features ac-source-functions ac-source-yasnippet
 ac-source-variables ac-source-symbols ac-source-abbrev
 ac-source-dictionary ac-source-words-in-same-mode-buffers)
</code></pre>

<p>So, autocomplete is looking through each one of those sources, trying
to find possible words I might be typing. The third one is called
<code>ac-source-yasnippet</code>, which seems to be where my error is coming
from.</p>

<p>So, I looked into the yasnippet source code and found that, indeed,
there was no function named <code>yas/current-snippet-table</code>. That function
has been renamed to <code>yas--get-snippets-table</code> in version 0.8.0, but
autocomplete is still relying on the old function name. (RANT: Don't
rename functions that others might be using without providing some
kind of alias, at least temporarily) I looked at the code for
<a href="https://github.com/auto-complete/auto-complete">autosnippet on github</a>
and noted that the latest version has been fixed to use the new code,
but it hasn't yet been released on MELPA. Until it is, the quick
solution is to remove <code>ac-source-yasnippet</code> from <code>ac-sources</code>.</p>

<pre><code>(delq 'ac-source-yasnippet ac-sources)
</code></pre>

<p>Then typing 'foo' autocompletes to 'foobar@example.com'.</p>

<p>It seems that autocomplete should be more forgiving of errors in any
specific 'source', passing it up to use other sources. Alternatively,
it should fail loudly when there's an error, so that I can know to fix
or remove the offending 'source'.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making blog posting easier]]></title>
    <link href="https://www.kurup.org/blog/2010/11/05/making-blog-posting-easier"/>
    <updated>2010-11-05T07:15:32-04:00</updated>
    <id>https://www.kurup.org/blog/2010/11/05/making-blog-posting-easier</id>
    <content type="html"><![CDATA[<p>Another piece of advice that I've heard over and over again is to make
things easier. <a href="http://sachachua.com/blog/2010/09/how-to-be-dispensable-and-why-you-should-document-and-automate-yourself-out-of-a-job/">Automate!</a>
In that vein, I learned a little elisp in order to make it easier to
create a new blog post. I create my posts in emacs, but I often cut
and paste the YAML header from a previous post, which is tedious and
time-consuming. Here is my new posting function:</p>

<pre><code>(defun vk-blogpost (title)
  "Create a new blog post."
  (interactive "sPost Title: ")
  (let ((slug (replace-regexp-in-string " " "-" (downcase title))))
    (find-file (concat "~/web/kurup.org/_posts/"
                       (format-time-string "%Y-%m-%d")
                       "-" slug ".markdown"))
    (insert "---\n")
    (insert "date: " (format-time-string "%Y/%m/%d %H:%M:%S") "\n")
    (insert "layout: post\n")
    (insert "title: " title "\n")
    (insert "categories: \n")
    (insert "---\n\n")))
</code></pre>

<p>After asking me for a title, it creates a new file and massages the
title to create a
<a href="http://en.wikipedia.org/wiki/Slug_(web_publishing">slug</a>). It
automatically enters the date of the post, both in the filename and
in the YAML header. This took me about an hour to write, mostly in
googling elisp commands. Hopefully, it will save time in the long run,
but even if it doesn't, it was fun to write :-)</p>

<p>Any feedback on my primitive elisp would be appreciated!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Editing as root in emacs]]></title>
    <link href="https://www.kurup.org/blog/2005/12/20/editing-as-root-in-emacs"/>
    <updated>2005-12-20T00:00:00-05:00</updated>
    <id>https://www.kurup.org/blog/2005/12/20/editing-as-root-in-emacs</id>
    <content type="html"><![CDATA[<p>I've been using emacs for 7 years and I just learned today that you can edit files as root while you're logged into emacs as an unprivileged user. Using sudo, of course. The details are <a href="http://lists.gnu.org/archive/html/emacs-wiki-discuss/2005-12/msg00014.html">here</a>.</p>
]]></content>
  </entry>
  
</feed>
